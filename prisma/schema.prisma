generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id                String    @id @unique @default(uuid())
  username          String    @unique
  email             String    @unique
  phone             String    @unique
  address           String?
  password          String
  profile           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isVerified        Boolean   @default(false)
  verificationToken String?
  active            Boolean   @default(false)
  gpsLocation       Json?
  restaurantName    String?   @unique
  speciality        String?
  role              String    @default("seller")
  deliveryCharge    Int       @default(0)
  bankDetails       Json?
  orders            Order[]
  products          Product[]

  @@map("sellers")
}

model User {
  id            String    @id @unique @default(uuid())
  username      String?   @unique
  email         String?   @unique
  phone         String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  addresses     String[]
  accounts      Account[]
  orders        Order[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String   @id @unique @default(uuid())
  sellerId    String
  name        String
  price       Int
  description String
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrls   String[]
  categories  String[]
  isFeatured  Boolean  @default(false)
  addedCost   Int      @default(0)
  priority    Int      @default(0)
  seller      Seller   @relation(fields: [sellerId], references: [id])

  @@map("products")
}

model Order {
  id              String          @id @unique @default(uuid())
  userId          String
  sellerId        String
  totalPrice      Int?
  deliveryAddress String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  paymentId       String?         @unique
  paymentStatus   String?
  productList     Json
  gpsLocation     Json?
  orderId         String?         @unique
  deliveryStatus  DeliveryStatus? @default(PROCESSING)
  seller          Seller          @relation(fields: [sellerId], references: [id])
  user            User            @relation(fields: [userId], references: [id])

  @@map("orders")
}

enum DeliveryStatus {
  PROCESSING
  ON_THE_WAY
  DELIVERED
  CANCELLED
}
