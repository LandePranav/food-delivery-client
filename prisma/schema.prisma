generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id                String    @id @unique @default(uuid())
  username          String    @unique
  email             String    @unique
  phone             String    @unique
  address           String?
  password          String
  profile           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isVerified        Boolean   @default(false)
  verificationToken String?
  orders            Order[]
  products          Product[]

  @@map("sellers")
}

model User {
  id            String    @id @unique @default(uuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  password      String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  orders        Order[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String   @id @unique @default(uuid())
  sellerId    String
  name        String
  price       Int
  category    String
  description String
  imageUrls   String[]
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      Seller   @relation(fields: [sellerId], references: [id])

  @@map("products")
}

model Order {
  id              String   @id @unique @default(uuid())
  userId          String
  sellerId        String
  productList     Json
  totalPrice      Int?
  deliveryAddress String
  paymentStatus   String?
  deliveryStatus  String?
  paymentId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  seller          Seller   @relation(fields: [sellerId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("orders")
}
